# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  env(CORS_ALLOW_ORIGIN): "^https?://localhost(:[0-9]+)?$"
  env(MAILER_DSN): "smtp://null"

  default_mirakl_custom_field_code: "stripe-url"
  default_stripe_prefill_onboarding: false
  default_redirect_onboarding: "%env(MIRAKL_HOST_NAME)%/mmp/shop/account/shop"
  default_mirakl_metadata_order_id: "mirakl_order_id"

  default_enable_product_payment_split: false
  default_enable_service_payment_split: false

  default_enable_product_payment_refund: false
  default_enable_service_payment_refund: false

  default_mail_on_notification_endpoint_down: true
  default_mail_on_notification_endpoint_down_cooldown: 10

  deprecated_webhook_secret: "%env(default::STRIPE_WEBHOOK_SECRET)%"
  deprecated_enable_product_payment_split: "%env(default:default_enable_product_payment_split:bool:ENABLES_AUTOMATIC_TRANSFER_CREATION)%"
  deprecated_enable_product_payment_refund: "%env(default:default_enable_product_payment_refund:bool:ENABLES_AUTOMATIC_REFUND_CREATION)%"

  router.request_context.host: "%env(BASE_HOST)%"
  router.request_context.scheme: 'https'

  app.base_host: "%env(BASE_HOST)%"
  app.stripe.client_id: "%env(STRIPE_CLIENT_ID)%"
  app.stripe.client_secret: "%env(STRIPE_CLIENT_SECRET)%"
  app.stripe.webhook_seller_secret: "%env(default:deprecated_webhook_secret:STRIPE_SELLERS_WEBHOOK_SECRET)%"
  app.stripe.webhook_operator_secret: "%env(default:deprecated_webhook_secret:STRIPE_OPERATOR_WEBHOOK_SECRET)%"
  app.stripe.prefill_onboarding: "%env(default:default_stripe_prefill_onboarding:bool:STRIPE_PREFILL_ONBOARDING)%"
  app.workflow.enable_product_payment_split: "%env(default:deprecated_enable_product_payment_split:bool:ENABLE_PRODUCT_PAYMENT_SPLIT)%"
  app.workflow.enable_service_payment_split: "%env(default:default_enable_service_payment_split:bool:ENABLE_SERVICE_PAYMENT_SPLIT)%"
  app.workflow.enable_product_payment_refund: "%env(default:deprecated_enable_product_payment_refund:bool:ENABLE_PRODUCT_PAYMENT_REFUND)%"
  app.workflow.enable_service_payment_refund: "%env(default:default_enable_service_payment_refund:bool:ENABLE_SERVICE_PAYMENT_REFUND)%"
  app.mirakl.api_key: "%env(MIRAKL_API_KEY)%"
  app.mirakl.host_name: "%env(MIRAKL_HOST_NAME)%"
  app.mirakl.stripe_custom_field_code: "%env(default:default_mirakl_custom_field_code:MIRAKL_CUSTOM_FIELD_CODE)%"
  app.redirect.onboarding: "%env(default:default_redirect_onboarding:REDIRECT_ONBOARDING)%"
  app.operator.notification_url: "%env(default::OPERATOR_NOTIFICATION_URL)%"
  app.mailer.technical: "%env(default::TECHNICAL_ALERT_EMAIL)%"
  app.mailer.technical_from: "%env(default::TECHNICAL_ALERT_EMAIL_FROM)%"
  app.endpoint_down.mail_notification: "%env(default:default_mail_on_notification_endpoint_down:bool:MAIL_ON_NOTIFICATION_ENDPOINT_DOWN)%"
  app.endpoint_down.mail_notification_throttle: "%env(default:default_mail_on_notification_endpoint_down_cooldown:int:MAIL_ON_NOTIFICATION_ENDPOINT_DOWN_COOLDOWN)%"
  app.mirakl.metadata_order_id_field_name: "%env(default:default_mirakl_metadata_order_id:MIRAKL_METADATA_ORDER_ID)%"

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    bind:
      $stripeClientId: "%app.stripe.client_id%"
      $stripeClientSecret: "%app.stripe.client_secret%"
      $webhookSellerSecret: "%app.stripe.webhook_seller_secret%"
      $webhookOperatorSecret: "%app.stripe.webhook_operator_secret%"
      $stripePrefillOnboarding: "%app.stripe.prefill_onboarding%"

      $miraklApiKey: "%app.mirakl.api_key%"
      $miraklHostName: "%app.mirakl.host_name%"
      $customFieldCode: "%app.mirakl.stripe_custom_field_code%"
      $enableProductPaymentSplit: "%app.workflow.enable_product_payment_split%"
      $enableServicePaymentSplit: "%app.workflow.enable_service_payment_split%"
      $enableProductPaymentRefund: "%app.workflow.enable_product_payment_refund%"
      $enableServicePaymentRefund: "%app.workflow.enable_service_payment_refund%"
      $redirectOnboarding: "%app.redirect.onboarding%"
      $operatorNotificationUrl: "%app.operator.notification_url%"
      $metadataOrderIdFieldName: "%app.mirakl.metadata_order_id_field_name%"

      $endpointDownMailNotification: "%app.endpoint_down.mail_notification%"
      $endpointDownMailNotificationThrottleDelay: "%app.endpoint_down.mail_notification_throttle%"
      $technicalEmail: "%app.mailer.technical%"
      $technicalEmailFrom: "%app.mailer.technical_from%"
      $baseHostOverride: "%app.base_host%"

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: "../src/*"
    exclude: "../src/{DependencyInjection,Entity,Migrations,Monolog,Tests,Kernel.php}"

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: "../src/Controller"
    tags: ["controller.service_arguments"]

  App\EventListener\SendFailedOperationToAlertingQueue:
    tags:
      - {name: 'doctrine.event_listener', event: 'postPersist'}
      - {name: 'doctrine.event_listener', event: 'postUpdate'}

  get_set_method_normalizer:
    class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
    public: false
    tags:
      - { name: "serializer.normalizer", priority: -950 } # ObjectNormalizer is priority -1000

  symfony_mailer_monolog.mail_message_factory:
    class: App\Factory\EmailFactory
    public: false
    lazy: true
    autowire: false
    arguments:
      $fromEmail: '%app.mailer.technical_from%'
      $toEmail:   '%app.mailer.technical%'
      $subject:    '[Stripe-Mirakl] An Error Occurred! %%message%%'

  symfony_mailer_monolog:
    class: App\Monolog\Handler\SymfonyMailerHandler
    public: false
    lazy: true
    autowire: false
    calls:
      - method: setFormatter
        arguments:
            - '@monolog.formatter.html'
    arguments:
      $mailer: '@mailer'
      $messageFactory: '@symfony_mailer_monolog.mail_message_factory'
      $level: 'warning'
      $bubble: true
